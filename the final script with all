#the final script of all the lectures
# Summary:
# 1 Beginning
# 2.1 Population density
# 2.2 Population distribution
# 3.1 Community multivariate analysis 
# 3.2 Community overlap
# 4 Remote sensing data visualization
# 5 Spectral indices
# 6 Time series
# 7 External data
# 8 Copernicus data
# 9 Classification
# 10 Variability
# 11 Principal Component Analysis

# 1 beginning

#with R we can do math operations like summing up
#like 2 + 3
maria <- 2 +3
aliki <- 5 + 3
aliki
final <- maria * aliki
final
final^2
aliki2 <- c(10, 20, 30, 50, 70) 
maria2 <- c(100, 500, 600, 1000, 2000) 
#we can plot the results
plot(aliki2, maria2)
plot(aliki2, maria2, xlab="number of people", ylab="microplastics")
people <- aliki2
microplastics <- maria2
plot(people, microplastics)
plot(people, microplastics, pch=19)
# https://www.google.com/search?client=ubuntu-sn&hs=yV6&sca_esv=570352775&channel=fs&sxsrf=AM9HkKknoSOcu32qjoErsqX4O1ILBOJX4w:1696347741672&q=point+symbols+in+R&tbm=isch&source=lnms&sa=X&ved=2ahUKEwia9brkm9qBAxVrQvEDHbEYDuMQ0pQJegQIChAB&biw=1760&bih=887&dpr=1.09#imgrc=lUw3nrgRKV8ynM
plot(people, microplastics, pch=19, cex=2)
plot(people, microplastics, pch=19, cex=2, col="blue")

#2.1 population density

#code related to population ecology
#a package is needed for point pattern analysis
#first we need to install our package
install.packages ("spatstat")
#we call our package to R
library(spatstat)
#lets use the bei data:
bei
#plotting the data
plot (bei)
plot(bei, cex=.5)
plot(bei, cex=.2)
#change the symbol - pch= point character
plot(bei, cex=.2, pch=19)
#additonal datasets
bei.extra
plot(bei.extra)
#we need to use only one part of the dataset , so elevation
#we need a symbol to link elevation to bei extra=
plot(bei.extra$elev)
elevation <- bei.extra$elev
#second method to select elements 
elevation2 <- bei.extra[[11]]
plot(elevation2)

#next lesson 3.10/10
#passing from points to a continuous surface
densitymap
#from the previous lesson we have the package spatstat
#we dont need to install it aagin
#we have to call it only, because it is already on the memory

library(spatstat)
bei
plot(bei)
plot(bei, cex=.5)
plot(bei, cex=.2)
densitymap <- density(bei)
densitymap
plot(densitymap)
points(bei, cex=.2)

#now we can change the colors

colorRampPalette(c("black","red", "orange", "yellow")) (100)
c1 <- colorRampPalette(c("black", "red", "orange", "yellow")) (100)
plot(densitymap, col=c1)

#change again

colorRampPalette(c("cyan", "coral", "coral2", "cyan1")) (100)
c1 <- colorRampPalette(c("cyan", "coral", "coral2", "cyan1")) (100)
plot(densitymap, col=c1)
plot(bei.extra)
elev <- bei.extra[[1]] #bei.extra$elev
plot(elev)
#multiframe
par(mfrow=c(1,2))
plot(densitymap)
plot(elev)
par(mfrow=c(1,3))
plot(densitymap)
plot(elev)
plot(bei)

# 2.2 population distribution
# Why populations disperse over the landscape in a certain manner?

library(sdm)
library(terra)

file <- system.file("external/species.shp", package="sdm")

rana <- vect(file)
rana$Occurrence

plot(rana)

# Selecting presences
pres <- rana[rana$Occurrence==1,]
plot(pres)

# exercise: select absence and call them abse
abse <- rana[rana$Occurrence==0,]
plot(abse)

# exrecise: plot presences and absences, one beside the other
par(mfrow=c(1,2))
plot(pres)
plot(abse)

# your new friend in case of graphical nulling:
dev.off()

# exercise: plot pres and abse altogether with two different colours
plot(pres, col="dark blue")
points(abse, col="light blue")

# predictors: environmental variables
# file <- system.file("external/species.shp", package="sdm")
# rana <- vect(file)

# elevation predictor
elev <- system.file("external/elevation.asc", package="sdm") 
elevmap <- rast(elev) # from terra package
plot(elevmap)
points(pres, cex=.5)

# temperature predictor
temp <- system.file("external/temperature.asc", package="sdm") 
tempmap <- rast(temp) # from terra package
plot(tempmap)
points(pres, cex=.5)

# exrcise: do the same with vegetation cover
vege <- system.file("external/vegetation.asc", package="sdm") 
vegemap <- rast(vege) # from terra package
plot(vegemap)
points(pres, cex=.5)

# exrcise: do the same with vegetation cover
prec <- system.file("external/precipitation.asc", package="sdm") 
precmap <- rast(prec) # from terra package
plot(precmap)
points(pres, cex=.5)

# final multiframe

par(mfrow=c(2,2))

# elev
plot(elevmap)
points(pres, cex=.5)

# temp
plot(tempmap)
points(pres, cex=.5)

# vege
plot(vegemap)
points(pres, cex=.5)

# prec
plot(precmap)
points(pres, cex=.5)

# 3.1
install.packages("vegan")
install.packages("sdm")
installed.packages("terra")
install.packages("rgdal")
library(sdm)
library(terra)
library(rgdal)
file <- system.file("external/species.shp", package="sdm")
file
rana <- vector(file)
rana
rana <- vector(life)
rana$Occurrence
species <- vect(life)
species
plot(species)
file <- system.file("external/species.shp", package="sdm") 
species <- vect(file)

# looking at the set
species

# plot
plot(species)
presence <- species[species$Occurrence == 1]

install.packages("rana")
library(rana)

# 3.2 
install.packages("vegan")
install.packages("overlap")
data(dune)
dune
library(vegan)
ord <- decorana(dune)
ord
decorana
ldc1 = 3.7004
ldcl2 = 3.1166
ldc3 = 1.30055
ldcl4 = 1.47888
total =ldc1 + ldcl2 +ldc3 + ldcl4
pldc1 = ldc1 * 100 / total
pldc2 = ldcl2 * 100 / total
pldc3 = ldc3 * 100 / total
pldc4 = ldcl4 * 100 / total
#for th percentage of two axes
pldc1 + pldc2
#to create a plot based exactly on those two axes
plot(ord)


# relation among species in time

library(overlap)
#all the informations of the species

data(kerinci)
summary(kerinci)
head(kerinci)


kerinci$timeRad <- kerinci$Time * 2 * pi
kerinci$timeRad
tiger <- kerinci[kerinci$Sps=="tiger",]

timetig <- tiger$timeRad
densityPlot(timetig, rug=TRUE)

# exercise: select only the data on macaque individuals
macaque <- kerinci[kerinci$Sps=="macaque",]
head(macaque)

timemac <- macaque$timeRad
densityPlot(timemac, rug=TRUE)

#to plot both timetig and timemac at the same plot 
#like that we can compare both values
overlapPlot(timetig, timemac)

#4
#remote sensing for ecosystem monitoring
install.packages("devtools")
install.packages("terra")
#call the packages

library(devtools)
library(terra)

# install the imageRy package from GitHub
devtools::install_github("ducciorocchini/imageRy")

library(imageRy)

#lets list the data

im.list()

b2 <- im.import("sentinel.dolomites.b2.tif" )
cl <- colorRampPalette(c("dark grey","grey","light grey")) (100)
plot(b2, col=cl)

b3 <- im.import("sentinel.dolomites.b3.tif"  )
cl <- colorRampPalette(c("dark grey","grey","light grey")) (100)
plot(b3, col=cl)


b3 <- im.import("sentinel.dolomites.b3.tif")
plot(b3, col=cl)

b4 <- im.import("sentinel.dolomites.b4.tif")
plot(b4, col=cl)

#import the NIR band from sentinel -1 (band 8)
b8 <- im.import("sentinel.dolomites.b8.tif")
plot(b8, col=cl)
par(mfrow=c(2,2))
plot(b2, col=cl)
plot(b3, col=cl)
plot(b4, col=cl)
plot(b8, col=cl)

#stack images
stacksent <- c(b2, b3, b4, b8)

dev.off() #this closes the device

plot(stacksent, col=cl)
plot(stacksent[[4]], col=cl) #4th element
par(mfrow=c(2,2))
clgrey <- colorRampPalette(c("grey","dark grey","light grey")) (100)
plot(b2, col=clgrey)
clpink <- colorRampPalette(c("hot pink1","hot pink2","light pink")) (100)
plot(b3, col=clpink)
clblue <- colorRampPalette(c("blue","dark blue","light blue")) (100)
plot(b4, col=clblue)
clgreen <- colorRampPalette(c("green","dark green","light green")) (100)
plot(b8, col=clgreen)

#band2 grey element1, stacksent[[1]]
#band3 pink element 2, stacksent[[2]]
#band4 blue element3, stacksent[[3]]
#band8 green element4, stacksent[[4]]
im.plotRGB(stacksent, r=3, g=2, b=1)
library(imageRy)
library(terra)
im.list()
b2 <- im.import("sentinel.dolomites.b2.tif")
b3 <- im.import("sentinel.dolomites.b3.tif")
b4 <- im.import("sentinel.dolomites.b4.tif")
b8 <- im.import("sentinel.dolomites.b8.tif")
#stack images all together
stacksent <- c(b2, b3, b4, b8)
im.plotRGB(stacksent, r=3, g=2, b=1)
im.plotRGB(stacksent, r=4, g=3, b=2)
im.plotRGB(stacksent, r=3, g=4, b=1)
im.plotRGB(stacksent, r=3, g=2, b=4)
pairs(stacksent)

# arrays
diameter <- c(100, 10, 50, 20, 15)
iron <- c(10, 1000, 20, 700, 900)

# a function
plot(iron, diameter) # iron and diameter are arguments!
plot(iron, diameter, pch=19)
plot(iron, diameter, pch=19, cex=2, col="red")

#5
#vegetation 
library(imageRy)
library(terra)
im.list()
#importinh a new image
m1992 <- im.import("matogrosso_ast_2006209_lrg.jpg")
#the bands are: 1=NIR. 2=RED, 3=GREEN
im.plotRGB(m1992, r=1, g=2, b=3) #it works also like im.plotRGB(m1992, 1, 2, 3)
#matogrosso is a tropical forest from 1992
#lets change the colors
im.plotRGB(m1992, 2, 1, 3)
im.plotRGB(m1992, 2, 3, 1) #it becomes blue and yellow
#import the recent image
m2006 <_ im.import("matogrosso_ast_2006209_lrg.jpg")
im.plotRGB(m2006, r=2, g=3, b=1)
#from the recent image we can see the yellow area wich means less green- vegatation
library(ggplot2)


im.import("matogrosso_ast_2006209_lrg.jpg")
m1992 <- im.import("matogrosso_ast_2006209_lrg.jpg")
im.plotRGB(m1992, r=1, g=2, b=3)
im.plotRGB(m1992, 2, 1, 3)
im.plotRGB(m1992, 2, 3, 1)
m2006 <- im.import("matogrosso_ast_2006209_lrg.jpg")
im.plotRGB(m2006, r=2, g=3, b=1)


#to be continued to the next lesson
#lets begin again with listing and importing images

library(imageRy)
library(terra)
im.list()


m1992 <- im.import("matogrosso_l5_1992219_lrg.jpg")
im.plotRGB(m1992, 2, 1, 3)
im.plotRGB(m1992, 2, 3, 1)
m2006 <- im.import("matogrosso_ast_2006209_lrg.jpg")
im.plotRGB(m2006, r=2, g=3, b=1)
par(mfrow=c(1,2))
im.plotRGB(m1992, 2, 3, 1)
im.plotRGB(m2006, 2, 3, 1)
dev.off()
plot(m1992[[1]])
dvi1992 = m1992[[1]] - m1992[[2]]
plot(dvi1992)
cl <- colorRampPalette(c("darkblue", "yellow", "red", "black")) (100)
plot(dvi1992, col=cl)
dvi2006 = m2006[[1]] - m2006[[2]]
plot(dvi2006, col=cl)
#NDVI
ndvi1992 = (m1992[[1]]- m1992[[2]]) / (m1992[[1]] + m1992[[2]])
ndvi1992 = dvi1992 / (m1992[[1]] + m1992[[2]])
plot(ndvi1992, col=cl)
ndvi2006 = dvi2006 / (m2006[[1]] + m2006[[2]])
plot(ndvi2006, col=cl)
par(mfrow=c(1,2))
plot(ndvi1992, col=cl)
plot(ndvi2006, col=cl)
clvir <- colorRampPalette(c("violet", "dark blue", "blue", "green", "yellow"))(100) # specifying a color scheme
plot(ndvi2006, col=clvir)
dev.off()
par(mfrow=c(1,2))
plot(ndvi1992, col=cl)
plot(ndvi2006, col=cl)

#6
#time series anlysis
#again terra
library(imageRy)
library(terra)
im.list()
#import the data

EN01 <- im.import("EN_01.png" )
EN13 <- im.import("EN_13.png" )
par(mfrow=c(2,1))
im.plotRGB.auto(EN01)
im.plotRGB.auto(EN13)

#using the first element (band) images
dif = EN01[[1]] - EN13[[1]]
plot(dif)
#change the color palette
cldif <- colorRampPalette(c('blue','white','red')) (100)
plot(dif, col=cldif)
#I can recognize on the map areas which has higher value relating to time


#new example :temperature in greenland
g2000 <- im.import("greenland.2000.tif" )
#change the color
clg <- colorRampPalette(c('blue','white','red')) (100)
plot(g2000, col=clg)
plot(g2015, col=clg)
par(mfrow=c(2,1))
plot(g2000, col=clg)
plot(g2015, col=clg)
par(mfrow=c(1,2))
plot(g2000, col=clg)
plot(g2015, col=clg)
#stacking the data
stacking <- c(g2000, g2005, g2010, g2015)
plot(stackg, col=clg)

#ex make the difference between the first and the final elements of the stack
#first anull the previous
dev.off()
difg <- stackg[[1]] - stackg[[4]]
plot(difg, col=cldif)


#ex make RGB plot using different years

im.plotRGB(stackg, r=1, g=2, b=3)
#we can see the colors of red, green, black

#extra
im.list()
im.import()
#install_github("") to instal packages from github
b2 <- im.import("sentinel.dolomites.b2.tif" )
#lets change the colors
clb <- colorRampPalette(c("dark grey","grey","light grey")) (100) # 100 is the amount of colours in the gradient
plot(b2, col=clb)
#import the green band from sentinel - 2 (band3)
b3 <- im.import("sentinel.dolomites.b3.tif" )
cl <- colorRampPalette(c("dark grey","grey","light grey")) (100)
plot(b2, col=cl)


library(imageRy)
library(terra)
im.list()
b2 <- im.import("sentinel.dolomites.b2.tif")
cl <- colorRampPalette(c("black","grey","light grey")) (100)
plot(b2, col=cl)
b3 <- im.import("sentinel.dolomites.b3.tif")
plot(b3, col=cl)
b4 <- im.import("sentinel.dolomites.b4.tif")
plot(b4, col=cl)
#import the NIR band from sentinel -1 (band 8)
b8 <- im.import("sentinel.dolomites.b8.tif")
plot(b8, col=cl)
#myltiframe
par(mfrow=c(2,2))
plot(b2, col=cl)
plot(b3, col=cl)
plot(b4, col=cl)
plot(b8, col=cl)
#stack images
stacksent <- c(b2, b3, b4, b8)
dev.off() #this closes the device
plot(stacksent, col=cl)
plot(stacksent[[4]], col=cl) #4th element


#plot in a multiframe the bands with different colors ramps
par(mfrow=c(2,2))

clrgrey <- colorRampPalette(c("grey","dark grey","light grey red")) (100)
plot(b2, col=clgrey)
clpink <- colorRampPalette(c("hot pink1","hot pink2","light pink")) (100)
plot(b3, col=clpink)
clblue <- colorRampPalette(c(" dark blue","blue","light blue")) (100)
plot(b4, col=clblue)
clgreen <- colorRampPalette(c("dark green","green","light green")) (100)
plot(b8, col=clgreen)



#RGB space
#stacksent :
#band2 grey element1, stacksent[[1]]
#band3 pink element 2, stacksent[[2]]
#band4 blue element3, stacksent[[3]]
#band8 green element4, stacksent[[4]]
im.plotRGB(stacksent, r=3, g=2, b=1)

#continue the previous lesson
library(imageRy)
library(terra)
im.list()
b2 <- im.import("sentinel.dolomites.b2.tif")
b3 <- im.import("sentinel.dolomites.b3.tif")
b4 <- im.import("sentinel.dolomites.b4.tif")
b8 <- im.import("sentinel.dolomites.b8.tif")
#stack images all together
stacksent <- c(b2, b3, b4, b8)
@play with the colors
im.plotRGB(stacksent, r=3, g=2, b=1)
im.plotRGB(stacksent, r=4, g=3, b=2)
im.plotRGB(stacksent, r=3, g=4, b=1)
im.plotRGB(stacksent, r=3, g=2, b=4)
#with pair we mean to correlate all the variables (even tables)
#we correlate to each other
pairs(stacksent)
#this represents every value of te system and we have their correlation 



#7

#external data
#we have download the data before
#we use the 'set working directly'
#setwd we put our path of my computer

setwd("C:/Users/Αλίκη/Desktop")
  #if it doesnt work because my computer is stupid I can do: 
getwd()
#this provides me my path


naja <- rast("najafiraq_etm_2003140_lrg.jpg")
#lets plot the data
#im.plotRGB

plotRGB(naja, r=1, g=2, b=3)

#next data
najaaug <- rast("najafiraq_oli_2023219_lrg.jpg")
plotRGB(najaaug, r=1, g=2, b=3)

par(mfrow=c(2,1))

#plot both of them together
par(mfrow=c(2,1))
plotRGB(najaaug, r=1, g=2, b=3)
plotRGB(naja, r=1, g=2, b=3)
#multitemporal change detection
dev.off()
majadif= naja[[1]] - najaaug[[1]]
cl <- colorRampPalette("brown", "grey", "orange") (100)
plot(majadif, col=cl)


#download my own image from nasa 
#i downloaded an image of a deforestation called grachaco

granchaco <- rast("granchaco_tmo_2000353_lrg.jpg")
plotRGB(granchaco, r=1, g=2, b=3)
#the rast function can do the same thing as we did for the previous classes with matogrosso


#8

#we will talk about copernicus and its data
#we use this link https://land.copernicus.vgt.vito.be/PDF/portal/Application.html
#register and log in
#download data from copernicus
install.packages("ncdf4")
library(ncdf4)
library(terra)

#where the data are going to be stored in my computers path
setwd("C:/Users/Αλίκη/Downloads") #use ths / instead of \
newnameoftheobject <- rast("c_gls_SSM1km_202311250000_CEURO_S1CSAR_V1.2.1 (1).nc")
plot(newnameoftheobject)
#change the name
soilm2023 <- rast("c_gls_SSM1km_202311250000_CEURO_S1CSAR_V1.2.1 (1).nc")
plot(soilm2023)
#there are two elements, use the first
plot(soilm2023[[1]])

#change colors
c1 <- colorRampPalette(c("red", "orange", "yellow")) (100)
plot(soilm2023[[1]], col=cl)


#we want to crop the image on some points
ext <- c(22, 26, 55, 57) #minimum longtitude, max long, min latitude, max lat
soilm2023c <- crop(soilm2023, ext)
plot(soilm2023c[[1]], col=cl)


#lets put another image from copernicus
soilm2023_24 <- rast("c_gls_SSM1km_202311240000_CEURO_S1CSAR_V1.2.1.nc")
plot(soilm2023_24)
soilm2023_24 <- crop(soilm2023_24, ext)
plot(soilm2023_24[[1]], col=cl)

#9
#classification of pixels in the image 
#classifying satellite images and estimate the amount change
#with the function of im.classify(sun)
#we need the previous packages
library(terra)
library(imageRy)

im.list()

#lets import the image of the sun
sun <- im.import("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")
#we can see the gases of the sun, yellow, brown, black colors which means 3 levels - clusters

#lets classify it
sunc <- im.classify(sun, num_clusters=3)
plot(sunc)

#classify satellite data
#I want to import the matogrosso image

im.list()
m2006 <- im.import("matogrosso_ast_2006209_lrg.jpg")          
m1992 <- im.import("matogrosso_l5_1992219_lrg.jpg")

plot(m1992c)
#if it shows me 3 pictures its ok

#classes: forest=1, human=2
m1992c<- im.classify(m1992, num_clusters=2)
plot(m1992c)

m2006c <- im.classify(m2006, num_clusters=2)
plot(m2006c)

#lets plot everything
par(mfrow=c(1,2)
plot(m1992c[[1]])
plot(m2006c[[1]])

#how many pixels related to forest and how many pixels related to people
f1992 <- freq(m1992c)
f1992

#lets calculate the percentages
tot1992 <- ncell(m1992c)
#ncell is calculating the numbers of pixels

#now the percentage
p1992 <- f1992 * 100 / tot1992
p1992
#it shows some numbers

#forest: 83% (the count), human 16.9%

#for 2006
f2006 <- freq(m2006c)
f2006
tot2006 <- ncell(m2006c)
p2006 <- f2006 * 100 / tot2006
p2006

#lets make a graphic of all of these
#lets do first a dataframe
class <-c("forest", "human")
y1992 <- c(83, 16.9)
y2006 <- c(45, 55)

tabout<- data.frame(class, y1992, y2006)
tabout
#lets do the final table

tabout<- data.frame(class, yc1992, yc2006)
install.packages("patchwork")
library(ggplot2)
library(patchwork)

p1 <- ggplot(tabout, aes(x=class, y=y1992, color=class)) + geom_bar(stat="identity", fill="white")
p2 <- ggplot(tabout, aes(x=class, y=y2006, color=class)) + geom_bar(stat="identity", fill="white")

p1 + p2

# final plot - rescaled
p1 <- ggplot(tabout, aes(x=class, y=y1992, color=class)) + geom_bar(stat="identity", fill="white") + ylim(c(0,100))
p2 <- ggplot(tabout, aes(x=class, y=y2006, color=class)) + geom_bar(stat="identity", fill="white") + ylim(c(0,100))
p1+p2

#10
# measurement of RS based variability

library(imageRy)
library(terra)
library(viridis)

im.list()

sent <- im.import("sentinel.png")
# band 1 = NIR
# band 2 = red 
# band 3 = green

im.plotRGB(sent, r=1, g=2, b=3)
im.plotRGB(sent, r=2, g=1, b=3)

nir <- sent[[1]]
plot(nir)
# LETS MOVE TO THE MOVING WINDOW TECHNIQUE 
#its a window of 3x3 pixels that moves inside an image and calculates the standard deviation of the 9 pixels inside the window, then the window moves right of 1 pixel and then we calculate another sd
#changes on dimension of the window, the sd changes.
# focal
sd3 <- focal(nir, matrix(1/9,3,3),fun=sd)
# The matrix is composed of 9 pixels from 1 to 9, and they are distributed 3 by 3 (3,3), the function we're going to calculate is the sd
plot(sd3)
viridisc <- colorRampPalette(viridis(7))(255)  # 255 is the amount of different nuances of the 7 colors used.
plot(sd3, col=viridisc)     # the part with the highest variability is the upper left

#exercise
# let's calculate the variability in a 7x7 pixels moving window
sd7 <- focal(nir, matrix(1/49, 7,7), fun=sd)
plot(sd7, col=viridisc)

# Exercise: plot via par(mfrow()) the 3x3 and the 7x7 standard deviation
par(mfrow=c(1,2))
plot(sd3, col=viridisc) 
plot(sd7, col=viridisc)    # if we enlarge the moving window (49 pixels instead of 9) then we have a higher variability. 

# original image plus the 7x7 sd
im.plotRGB(sent, r=1, g=2, b=3) 
plot(sd7, col=viridisc)    # in the upper left part we can see a lot of white, which indicates a high geological variability (or species variability in some cases), so it discriminates between snow/clouds and bare soil. 

# How can we decide which layer we should apply/calculate the standard deviation to? With multivariate analysis.

#11
#We'll perform the PCA and use the PC1 to make the calculation of sd. 
library(imageRy)
library(terra)
library(viridis)

im.list()

sent <- im.import("sentinel.png")

pairs(sent)
# sentinel_2 and sentinel_3 are correlated with each other very well
#Sentinel_4 is just a control layer, we can ignore it

# perform PCA on sent 
sentpc <- im.pca2(sent)

# we can isolate the first component like:
sentpc 
pc1 <- sentpc$PC1

viridisc <- colorRampPalette(viridis(7))(255)
plot(pc1, col=viridisc)

# calculating sd on top of pc1 
pc1sd3 <- focal(pc1, matrix(1/9, 3,3), fun=sd)
plot(pc1sd3, col=viridisc)  # This is similar to the nir, but this is objectively calculated on a specific chosen layer
#We can make the calculation obviously on a 7x7 pixels window. 

pc1sd7 <- focal(pc1, matrix(1/49, 7,7), fun=sd)
plot(pc1sd7, col=viridisc)      #plot the original image sentinel, the sd3x3, the sd7x7, the pc1, the pc1 sd3x3 and the pc1 sd7x7.

par(mfrow=c(2,3))
im.plotRGB(sent, 2, 1, 3)

# sd from the variability script:
plot(sd3, col=viridisc)
plot(sd7, col=viridisc)
plot(pc1, col=viridisc)
plot(pc1sd3, col=viridisc)
plot(pc1sd7, col=viridisc)

# we can stack the data (single layers: sd3, sd7, pc1sd3, pc1sd7) in a single object instead of using par(mfrow)
sdstack <- c(sd3, sd7, pc1sd3, pc1sd7)
plot(sdstack, col=viridisc)   
#if we want we can change the names of the plots with the function names()
names(sdstack) <- c("sd3", "sd7", "pc1sd3", "pc1sd7")
plot(sdstack, col=viridisc)

#the sd represents the amount of variability in a certain moving window; the function focal() can be used to calculate other statistics, like mean, etc., on a single layer.
